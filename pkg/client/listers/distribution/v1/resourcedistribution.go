/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Gentleelephant/custom-controller/pkg/apis/distribution/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceDistributionLister helps list ResourceDistributions.
// All objects returned here must be treated as read-only.
type ResourceDistributionLister interface {
	// List lists all ResourceDistributions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ResourceDistribution, err error)
	// ResourceDistributions returns an object that can list and get ResourceDistributions.
	ResourceDistributions(namespace string) ResourceDistributionNamespaceLister
	ResourceDistributionListerExpansion
}

// resourceDistributionLister implements the ResourceDistributionLister interface.
type resourceDistributionLister struct {
	indexer cache.Indexer
}

// NewResourceDistributionLister returns a new ResourceDistributionLister.
func NewResourceDistributionLister(indexer cache.Indexer) ResourceDistributionLister {
	return &resourceDistributionLister{indexer: indexer}
}

// List lists all ResourceDistributions in the indexer.
func (s *resourceDistributionLister) List(selector labels.Selector) (ret []*v1.ResourceDistribution, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ResourceDistribution))
	})
	return ret, err
}

// ResourceDistributions returns an object that can list and get ResourceDistributions.
func (s *resourceDistributionLister) ResourceDistributions(namespace string) ResourceDistributionNamespaceLister {
	return resourceDistributionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceDistributionNamespaceLister helps list and get ResourceDistributions.
// All objects returned here must be treated as read-only.
type ResourceDistributionNamespaceLister interface {
	// List lists all ResourceDistributions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ResourceDistribution, err error)
	// Get retrieves the ResourceDistribution from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ResourceDistribution, error)
	ResourceDistributionNamespaceListerExpansion
}

// resourceDistributionNamespaceLister implements the ResourceDistributionNamespaceLister
// interface.
type resourceDistributionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceDistributions in the indexer for a given namespace.
func (s resourceDistributionNamespaceLister) List(selector labels.Selector) (ret []*v1.ResourceDistribution, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ResourceDistribution))
	})
	return ret, err
}

// Get retrieves the ResourceDistribution from the indexer for a given namespace and name.
func (s resourceDistributionNamespaceLister) Get(name string) (*v1.ResourceDistribution, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("resourcedistribution"), name)
	}
	return obj.(*v1.ResourceDistribution), nil
}
