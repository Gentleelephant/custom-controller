/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Gentleelephant/custom-controller/pkg/apis/policy/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PropagationLister helps list Propagations.
// All objects returned here must be treated as read-only.
type PropagationLister interface {
	// List lists all Propagations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Propagation, err error)
	// Propagations returns an object that can list and get Propagations.
	Propagations(namespace string) PropagationNamespaceLister
	PropagationListerExpansion
}

// propagationLister implements the PropagationLister interface.
type propagationLister struct {
	indexer cache.Indexer
}

// NewPropagationLister returns a new PropagationLister.
func NewPropagationLister(indexer cache.Indexer) PropagationLister {
	return &propagationLister{indexer: indexer}
}

// List lists all Propagations in the indexer.
func (s *propagationLister) List(selector labels.Selector) (ret []*v1.Propagation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Propagation))
	})
	return ret, err
}

// Propagations returns an object that can list and get Propagations.
func (s *propagationLister) Propagations(namespace string) PropagationNamespaceLister {
	return propagationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PropagationNamespaceLister helps list and get Propagations.
// All objects returned here must be treated as read-only.
type PropagationNamespaceLister interface {
	// List lists all Propagations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Propagation, err error)
	// Get retrieves the Propagation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Propagation, error)
	PropagationNamespaceListerExpansion
}

// propagationNamespaceLister implements the PropagationNamespaceLister
// interface.
type propagationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Propagations in the indexer for a given namespace.
func (s propagationNamespaceLister) List(selector labels.Selector) (ret []*v1.Propagation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Propagation))
	})
	return ret, err
}

// Get retrieves the Propagation from the indexer for a given namespace and name.
func (s propagationNamespaceLister) Get(name string) (*v1.Propagation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("propagation"), name)
	}
	return obj.(*v1.Propagation), nil
}
